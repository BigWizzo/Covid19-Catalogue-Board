{"version":3,"sources":["redux/actions/actionTypes.js","components/CountryListItem.js","components/CountryList.js","redux/actions/countriesActions.js","components/CountryDescription.js","components/CountryDetails.js","redux/actions/countryActions.js","App.js","redux/reducers/countriesReducer.js","redux/reducers/countryReducer.js","redux/reducers/rootReducer.js","redux/store.js","index.js"],"names":["FETCH_COUNTRY_REQUEST","FETCH_COUNTRY_SUCCESS","FETCH_COUNTRY_FAILURE","FETCH_COUNTRIES_REQUEST","FETCH_COUNTRIES_SUCCESS","FETCH_COUNTRIES_FAILURE","CountryListItem","nation","All","country","population","confirmed","recovered","deaths","className","to","reg","CountryList","useState","nat","setNat","region","setRegion","dispatch","useDispatch","countries","useSelector","state","data","fetchCountries","a","type","axios","get","response","Object","values","payload","useEffect","value","placeholder","onChange","e","target","aria-label","map","x","loading","filter","continent","selectByRegion","join","toLowerCase","includes","selectByCountry","length","CountryDescription","description","label","toUpperCase","abbreviation","updated","CountryDetails","countryParam","useParams","fetchCountry","capital_city","labels","getCountryData","App","path","component","exact","initialState","countrriesReducer","action","countryReducer","datasets","backgroundColor","borderColor","borderWidth","rootReducer","combineReducers","countriesReducer","persistConfig","key","storage","persistedReducer","persistReducer","store","createStore","composeWithDevTools","applyMiddleware","thunk","persistor","persistStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cd41e176.chunk.js","sourcesContent":["export const FETCH_COUNTRY_REQUEST = 'FETCH_COUNTRY_REQUEST';\nexport const FETCH_COUNTRY_SUCCESS = 'FETCH_COUNTRY_SUCCESS';\nexport const FETCH_COUNTRY_FAILURE = 'FETCH_COUNTRY_FAILURE';\n\nexport const FETCH_COUNTRIES_REQUEST = 'FETCH_COUNTRIES_REQUEST';\nexport const FETCH_COUNTRIES_SUCCESS = 'FETCH_COUNTRIES_SUCCESS';\nexport const FETCH_COUNTRIES_FAILURE = 'FETCH_COUNTRIES_FAILURE';\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst CountryListItem = ({ nation }) => {\n  const { country, population, confirmed, recovered, deaths } = nation.All;\n  return (\n    <div className=\"col-sm-12 col-md-6 col-lg-4\">\n      <Link className=\"text-decoration-none\" to={country}>\n        <div className=\"card border-dark mb-3\">\n          <h5 className=\"card-header text-success text-center\">{country}</h5>\n          <div className=\"card-body text-dark\">\n            <p className=\"card-text\">\n              <span className=\"text-success\">Population: </span>\n              <span>{population} People</span>\n            </p>\n            <p className=\"card-text\">\n              <span className=\"text-success\">confirmed: </span>\n              <span>{confirmed} cases</span>\n            </p>\n            <p className=\"card-text\">\n              <span className=\"text-success\">recovered: </span>\n              <span>{recovered} cases</span>\n            </p>\n            <p className=\"card-text\">\n              <span className=\"text-success\">deaths: </span>\n              <span>{deaths} cases</span>\n            </p>\n          </div>\n        </div>\n      </Link>\n    </div>\n  );\n};\n\nexport default CountryListItem;\n","import { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getCountriesData } from '../redux/actions/countriesActions';\nimport CountryListItem from './CountryListItem';\n\nconst reg = [\n  'Search by Region',\n  'Africa',\n  'Europe',\n  'Asia',\n  'North America',\n  'South America',\n  'Oceania',\n];\n\nconst CountryList = () => {\n  const [nat, setNat] = useState('');\n  const [region, setRegion] = useState('');\n\n  const dispatch = useDispatch();\n  const countries = useSelector((state) => state.countries.data);\n\n  const fetchCountries = () => {\n    dispatch(getCountriesData());\n  };\n\n  useEffect(() => {\n    fetchCountries();\n  }, []);\n\n  const filteredCountries = () => {\n    if (nat === '' && region === '') {\n      return countries;\n    }\n    return countries.filter((country) => {\n      if (country.All.country && country.All.continent) {\n        const selectByRegion = Object.values(country.All.continent)\n          .join('')\n          .toLowerCase()\n          .includes(region.toLowerCase());\n\n        const selectByCountry = Object.values(country.All.country)\n          .join('')\n          .toLowerCase()\n          .includes(nat.toLowerCase());\n\n        if (region.length > 0 && nat === '') {\n          return selectByRegion;\n        }\n        if (nat.length > 0 && region === '') {\n          return selectByCountry;\n        }\n        if (nat.length > 0 && region.length > 0) {\n          return selectByCountry;\n        }\n      }\n    });\n  };\n\n  return (\n    <div className=\"main\">\n      <h1 className=\"py-4 text-center\">Covid 19 Board</h1>\n      <form className=\"country-form m-auto mb-5\">\n        <div className=\"\">\n          <input\n            className=\"form-control form-outline\"\n            type=\"text\"\n            value={nat}\n            placeholder=\"Search by Country\"\n            onChange={(e) => setNat(e.target.value)}\n          />\n          <select\n            className=\"form-select p-2\"\n            value={region}\n            onChange={(e) => setRegion(e.target.value)}\n            aria-label=\"Default select example\"\n          >\n            {reg.map((x) => (\n              <option value={x} key={x}>\n                {x}\n              </option>\n            ))}\n          </select>\n        </div>\n      </form>\n      <div className=\"content\">\n        {countries.loading && <h4 className=\"text-center\">Loading...</h4>}\n        <div className=\"row g-0\">\n          {filteredCountries().map(\n            (country) =>\n              country.All.country && (\n                <CountryListItem nation={country} key={country.All.country} />\n              ),\n          )}\n        </div>\n      </div>\n      <div className=\"circle-small-4 br-50 pos-abs\"></div>\n      <div className=\"circle-small-5 br-50 pos-abs\"></div>\n      <div className=\"circle-small-2 br-50 pos-abs\"></div>\n    </div>\n  );\n};\n\nexport default CountryList;\n","import axios from 'axios';\nimport {\n  FETCH_COUNTRIES_REQUEST,\n  FETCH_COUNTRIES_SUCCESS,\n  FETCH_COUNTRIES_FAILURE,\n} from './actionTypes';\nexport const getCountriesData = () => {\n  return async (dispatch) => {\n    try {\n      dispatch({\n        type: FETCH_COUNTRIES_REQUEST,\n      });\n      const response = await axios.get(\n        `https://covid-api.mmediagroup.fr/v1/cases`,\n      );\n\n      const data = Object.values(response.data);\n\n      dispatch({\n        type: FETCH_COUNTRIES_SUCCESS,\n        payload: data,\n      });\n    } catch (error) {\n      dispatch({\n        type: FETCH_COUNTRIES_FAILURE,\n      });\n    }\n  };\n};\n","const CountryDescription = ({ description }) => {\n  return (\n    <div className=\"mb-3\">\n      <div className=\"row g-0\">\n        <div className=\"col-md-8\">\n          <div className=\"card-body text-left\">\n            <p className=\"country-wrap font-22\">\n              <span>Country Name: </span>\n              <span className=\"country-code green-800 font-22\">\n                {description?.label.toUpperCase()}\n              </span>\n            </p>\n            <p className=\"card-text\">\n              <span>Country Code: </span>\n              <span className=\"card-title\">{description?.abbreviation}</span>\n            </p>\n            <p className=\"mute-p\">\n              <small className=\"text-muted\">\n                {description?.label} has a population of{' '}\n                {description?.population}. It has so far recorded{' '}\n                {description?.deaths} deaths. {description?.confirmed} cases\n                have been confirmed and {description?.recovered} people have\n                recovered from the virus.\n              </small>\n            </p>\n          </div>\n        </div>\n        <div className=\"col-md-4 text-center\">\n          <h4 className=\"card-hed font-italic\">{description?.continent}</h4>\n          <hr />\n          <div className=\"card-body\">\n            <div className=\"icon-div py-3\">\n              <div className=\"icon-span \">\n                <div className=\"\">\n                  <p className=\"font-10 text-success\">Last Updated</p>\n                  <p className=\"increase\">\n                    <i className=\"fas fa-pen-square font-22 text-success\"></i>\n                  </p>\n                  <p className=\"font-12 text-success\">{description?.updated}</p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default CountryDescription;\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Pie } from 'react-chartjs-2';\nimport { getCountryData } from '../redux/actions/countryActions';\nimport { useParams, Link } from 'react-router-dom';\nimport CountryDescription from './CountryDescription';\n\nconst CountryDetails = () => {\n  const countryParam = useParams();\n  const dispatch = useDispatch();\n  const country = useSelector((state) => state.country);\n  const fetchCountry = () => {\n    dispatch(\n      getCountryData({\n        nation: countryParam.country,\n      }),\n    );\n  };\n\n  useEffect(() => {\n    fetchCountry();\n  }, []);\n\n  return (\n    <div>\n      <p className=\"text-success m-3\">\n        <Link className=\"text-success text-decoration-none bold\" to=\"/\">\n          Go Home\n        </Link>\n      </p>\n      <h1 className=\"text-center mt-3\">{countryParam.country}</h1>\n      {country.data ? (\n        <div className=\"main-content-wrapper row m-0 p-3\">\n          <div className=\"chart-wrapper col-md-6\">\n            <Pie className=\"w-75 m-auto\" data={country.data} />\n          </div>\n          <div className=\"country-desc col-md-6\">\n            <CountryDescription description={country.description} />\n          </div>\n        </div>\n      ) : (\n        <div className=\"empty text-center\">\n          {!country.loading && (\n            <h4 className=\"no-entry p-3\">\n              Please enter Country Name and hit Submit\n            </h4>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default CountryDetails;\n","import axios from 'axios';\nimport {\n  FETCH_COUNTRY_REQUEST,\n  FETCH_COUNTRY_SUCCESS,\n  FETCH_COUNTRY_FAILURE,\n} from './actionTypes';\nexport const getCountryData = ({ nation }) => {\n  return async (dispatch) => {\n    try {\n      dispatch({\n        type: FETCH_COUNTRY_REQUEST,\n      });\n      const response = await axios.get(\n        `https://covid-api.mmediagroup.fr/v1/cases?country=${nation}`,\n      );\n      const {\n        country,\n        confirmed,\n        recovered,\n        deaths,\n        abbreviation,\n        population,\n        continent,\n        capital_city,\n        updated,\n      } = response.data.All;\n\n      dispatch({\n        type: FETCH_COUNTRY_SUCCESS,\n        payload: {\n          data: [confirmed, recovered, deaths],\n          label: country,\n          labels: ['Confirmed', 'Recovered', 'Deaths'],\n          abbreviation,\n          population,\n          continent,\n          capital_city,\n          updated,\n          country,\n          confirmed,\n          recovered,\n          deaths,\n        },\n      });\n    } catch (error) {\n      dispatch({\n        type: FETCH_COUNTRY_FAILURE,\n      });\n    }\n  };\n};\n","import { Route, Switch } from 'react-router-dom';\nimport CountryList from './components/CountryList';\nimport CountryDetails from './components/CountryDetails';\n\nfunction App() {\n  return (\n    <div className=\"App container text-light\">\n      <Switch>\n        <Route path=\"/\" component={CountryList} exact />\n        <Route path=\"/:country\" component={CountryDetails} />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","import {\n  FETCH_COUNTRIES_REQUEST,\n  FETCH_COUNTRIES_SUCCESS,\n  FETCH_COUNTRIES_FAILURE,\n} from '../actions/actionTypes';\n\nconst initialState = {\n  loading: false,\n  data: [],\n};\n\nconst countrriesReducer = (state = initialState, action) => {\n  const { type, payload } = action;\n\n  switch (type) {\n    case FETCH_COUNTRIES_REQUEST:\n      return {\n        ...state,\n        loading: true,\n      };\n    case FETCH_COUNTRIES_FAILURE:\n      return {\n        ...state,\n        loading: false,\n      };\n    case FETCH_COUNTRIES_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        data: payload,\n      };\n    default:\n      break;\n  }\n  return state;\n};\n\nexport default countrriesReducer;\n","import {\n  FETCH_COUNTRY_REQUEST,\n  FETCH_COUNTRY_SUCCESS,\n  FETCH_COUNTRY_FAILURE,\n} from '../actions/actionTypes';\n\nconst initialState = {\n  loading: false,\n  data: {},\n};\n\nconst countryReducer = (state = initialState, action) => {\n  const { type, payload } = action;\n\n  switch (type) {\n    case FETCH_COUNTRY_REQUEST:\n      return {\n        ...state,\n        loading: true,\n      };\n    case FETCH_COUNTRY_FAILURE:\n      return {\n        ...state,\n        loading: false,\n      };\n    case FETCH_COUNTRY_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        data: {\n          labels: payload.labels,\n          datasets: [\n            {\n              label: payload.label,\n              data: payload.data,\n              backgroundColor: ['#9e8402', 'rgba(0, 128, 0, 0.5)', 'red'],\n              borderColor: ['rgb(0, 128, 0)'],\n              borderWidth: 1,\n            },\n          ],\n        },\n        description: {\n          confirmed: payload.confirmed,\n          recovered: payload.recovered,\n          deaths: payload.deaths,\n          label: payload.label,\n          abbreviation: payload.abbreviation,\n          population: payload.population,\n          continent: payload.continent,\n          capital_city: payload.capital_city,\n          updated: payload.updated,\n        },\n      };\n    default:\n      break;\n  }\n  return state;\n};\n\nexport default countryReducer;\n","import { combineReducers } from 'redux';\nimport countriesReducer from './countriesReducer';\nimport countryReducer from './countryReducer';\n\nconst rootReducer = combineReducers({\n  country: countryReducer,\n  countries: countriesReducer,\n});\n\nexport default rootReducer;\n","import { applyMiddleware, createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers/rootReducer';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\n\nconst persistConfig = {\n  key: 'root',\n  storage,\n};\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\nexport const store = createStore(\n  persistedReducer,\n  composeWithDevTools(applyMiddleware(thunk)),\n);\n\nexport const persistor = persistStore(store);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { store, persistor } from './redux/store';\nimport { PersistGate } from 'redux-persist/integration/react';\n\nReactDOM.render(\n  <Provider store={store}>\n    <PersistGate loading={null} persistor={persistor}>\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n    </PersistGate>\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}